BOOST_AUTO_TEST_CASE(cpu_instruction_CB24)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 24.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB24);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb bf.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB73)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 73.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB73);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB65)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 65.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB65);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB32)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 32.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB32);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB49)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 49.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB49);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/bb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_20)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/20.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x20);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_98)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/98.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x98);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_77)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/77.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x77);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB08)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 08.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB08);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_61)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/61.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x61);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_36)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/36.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x36);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_41)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/41.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x41);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB28)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 28.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB28);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_DC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/dc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xDC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_16)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/16.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x16);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ad.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB90)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 90.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB90);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_00)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/00.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x00);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB69)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 69.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB69);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB86)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 86.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB86);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_57)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/57.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x57);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_EE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ee.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xEE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB45)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 45.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB45);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_94)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/94.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x94);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB12)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 12.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB12);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_82)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/82.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x82);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB04)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 04.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB04);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBEA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ea.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBEA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB53)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 53.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB53);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB52)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 52.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB52);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB05)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 05.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB05);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_83)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/83.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x83);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB13)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 13.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB13);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_95)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/95.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x95);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb aa.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB44)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 44.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB44);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb df.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_56)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/56.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x56);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB68)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 68.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB68);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB87)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 87.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB87);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_01)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/01.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x01);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ae.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB91)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 91.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB91);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_17)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/17.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x17);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB29)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 29.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB29);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_40)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/40.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x40);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_37)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/37.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x37);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ce.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_60)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/60.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x60);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB09)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 09.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB09);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_FB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/fb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xFB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_99)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/99.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x99);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_76)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/76.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x76);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_21)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/21.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x21);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB48)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 48.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB48);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/bc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ca.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB33)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 33.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB33);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ff.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB64)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 64.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB64);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB72)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 72.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB72);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB25)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 25.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB25);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_47)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/47.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x47);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_DE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/de.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xDE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_10)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/10.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x10);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB79)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 79.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB79);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ab.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB96)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 96.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB96);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_06)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/06.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x06);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB80)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 80.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB80);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_51)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/51.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x51);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB38)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 38.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB38);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb da.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB43)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 43.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB43);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_92)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/92.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x92);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb af.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB14)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 14.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB14);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_84)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/84.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x84);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB02)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 02.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB02);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB55)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 55.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB55);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB22)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 22.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB22);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB75)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 75.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB75);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB63)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 63.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB63);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb fa.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB34)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 34.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB34);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb cf.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/bd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_26)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/26.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x26);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB18)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 18.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB18);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_71)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/71.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x71);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_FE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/fe.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xFE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_88)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/88.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x88);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_67)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/67.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x67);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB59)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 59.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB59);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_30)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/30.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x30);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_31)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/31.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x31);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB58)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 58.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB58);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_89)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/89.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x89);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_66)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/66.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x66);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_70)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/70.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x70);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB19)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 19.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB19);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_27)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/27.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x27);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/be.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB35)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 35.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB35);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB62)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 62.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB62);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB74)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 74.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB74);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ba.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB23)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 23.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB23);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB54)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 54.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB54);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBEF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ef.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBEF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB03)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 03.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB03);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_85)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/85.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x85);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB15)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 15.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB15);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_93)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/93.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x93);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB42)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 42.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB42);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB39)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 39.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB39);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_50)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/50.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x50);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB81)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 81.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB81);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_07)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/07.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x07);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB78)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 78.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB78);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ac.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB97)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 97.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB97);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_11)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/11.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x11);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_46)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/46.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x46);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB57)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 57.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB57);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBEE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ee.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBEE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB00)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 00.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB00);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_69)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/69.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x69);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_86)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/86.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x86);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB16)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 16.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB16);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ad.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_90)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/90.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x90);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB41)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 41.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB41);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_28)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/28.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x28);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb dc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_EA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ea.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xEA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_53)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/53.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x53);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB82)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 82.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB82);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_04)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/04.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x04);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB94)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 94.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB94);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_12)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/12.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x12);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_45)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/45.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x45);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_32)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/32.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x32);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_65)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/65.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x65);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_73)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/73.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x73);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_24)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/24.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x24);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/bf.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb cd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB36)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 36.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB36);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_08)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/08.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x08);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb fc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB61)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 61.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB61);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB98)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 98.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB98);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB77)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 77.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB77);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_49)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/49.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x49);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb bb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB20)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 20.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB20);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB21)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 21.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB21);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_48)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/48.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x48);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb bc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB99)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 99.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB99);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB76)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 76.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB76);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB60)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 60.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB60);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_09)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/09.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x09);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb fb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB37)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 37.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB37);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ce.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_25)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/25.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x25);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_72)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/72.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x72);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_FF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ff.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xFF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_64)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/64.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x64);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ca.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_33)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/33.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x33);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_44)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/44.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x44);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_DF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/df.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xDF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_13)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/13.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x13);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB95)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 95.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB95);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/aa.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_05)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/05.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x05);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB83)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 83.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB83);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_52)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/52.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x52);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_29)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/29.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x29);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb db.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB40)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 40.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB40);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ae.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_91)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/91.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x91);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB17)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 17.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB17);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_68)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/68.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x68);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_87)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/87.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x87);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB01)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 01.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB01);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBED)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ed.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBED);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB56)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 56.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB56);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_34)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/34.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x34);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB5F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 5f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB5F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cf.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_63)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/63.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x63);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB0A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 0a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB0A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_FA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/fa.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xFA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_75)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/75.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x75);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_9A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/9a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x9A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_22)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/22.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x22);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_59)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/59.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x59);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb cb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB30)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 30.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB30);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb fe.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB88)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 88.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB88);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB67)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 67.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB67);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_18)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/18.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x18);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB71)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 71.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB71);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb bd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB26)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 26.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB26);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB51)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 51.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB51);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_38)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/38.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x38);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBEC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ec.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBEC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB06)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 06.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB06);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_80)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/80.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x80);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB10)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 10.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB10);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_79)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/79.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x79);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ab.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_96)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/96.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x96);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB47)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 47.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB47);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb de.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_55)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/55.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x55);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB84)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 84.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB84);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_02)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/02.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x02);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB92)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 92.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB92);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_AF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/af.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xAF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB7F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 7f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB7F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_14)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/14.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x14);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_DA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/da.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xDA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB2A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 2a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB2A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_43)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/43.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x43);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_42)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/42.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x42);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBB2)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb b2.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBB2);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_15)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/15.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x15);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB93)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 93.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB93);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB6A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 6a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB6A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_03)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/03.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x03);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBF3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb f3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBF3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB85)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 85.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB85);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB3F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 3f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB3F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_54)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/54.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x54);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_EF)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ef.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xEF);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBDD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb dd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBDD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_B6)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/b6.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xB6);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB46)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 46.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB46);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_2D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/2d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x2D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_78)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/78.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x78);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBAC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb ac.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBAC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_97)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/97.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x97);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB11)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 11.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB11);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_7C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/7c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x7C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_81)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/81.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x81);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_F7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/f7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xF7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB07)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 07.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB07);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_6E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/6e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x6E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_39)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/39.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x39);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBEB)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb eb.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBEB);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_C0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/c0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xC0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB50)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 50.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB50);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE9)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e9.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE9);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_3B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/3b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x3B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_4E)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/4e.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x4E);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB27)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 27.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB27);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_D7)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/d7.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xD7);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBBE)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb be.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBBE);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_1B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/1b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x1B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB70)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 70.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB70);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_A0)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/a0.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xA0);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_19)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/19.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x19);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB9D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 9d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB9D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_0D)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/0d.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x0D);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB89)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 89.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB89);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB66)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 66.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB66);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB8B)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 8b.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB8B);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBFD)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb fd.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBFD);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBC8)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb c8.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBC8);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_5C)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/5c.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x5C);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB31)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 31.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB31);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_E1)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/e1.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xE1);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_58)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/58.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x58);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBCC)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb cc.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBCC);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_BA)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/ba.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xBA);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBD3)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb d3.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBD3);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_23)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/23.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x23);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB4A)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 4a.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB4A);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBA4)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb a4.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBA4);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_74)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/74.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x74);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CB1F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb 1f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCB1F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_8F)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/8f.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x8F);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_62)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/62.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x62);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_CBE5)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/cb e5.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0xCBE5);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
BOOST_AUTO_TEST_CASE(cpu_instruction_35)
{
	boost::property_tree::ptree pt;
	boost::property_tree::read_json("/Users/josephmcilvaine/gbc_emulator/tests/v1/35.json", pt);
	for(auto& a : pt)
	{
		Expected e;
		SetInitialParams(a);
		SetExpectedParams(a, e);
		CPU->Execute(0x35);
		BOOST_CHECK_EQUAL(CPU->PC.value() , e.pc.value());
		BOOST_CHECK_EQUAL(CPU->SP.value() , e.sp.value());
		BOOST_CHECK_EQUAL(CPU->A.value() , e.a.value());
		BOOST_CHECK_EQUAL(CPU->B.value() , e.b.value());
		BOOST_CHECK_EQUAL(CPU->C.value() , e.c.value());
		BOOST_CHECK_EQUAL(CPU->D.value() , e.d.value());
		BOOST_CHECK_EQUAL(CPU->E.value() , e.e.value());
		BOOST_CHECK_EQUAL(CPU->FLAGS.value() , e.f.value());
		BOOST_CHECK_EQUAL(CPU->H.value() , e.h.value());
		BOOST_CHECK_EQUAL(CPU->L.value() , e.l.value());
	}
}
